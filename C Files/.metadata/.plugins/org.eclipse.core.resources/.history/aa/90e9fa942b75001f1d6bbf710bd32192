#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void display_time(unsigned char, unsigned char, unsigned char);

// Variables for timer
unsigned char hours = 0;
unsigned char minutes = 0;
unsigned char seconds = 0;

// Flags for button state
unsigned char TimerState_pushbutton_flag = 0;
unsigned char TimerState_flag = 0; // 0-Increment, 1-Decrement

// Flags for time adjustment
unsigned char Sec_Decrement_flag = 0;
unsigned char Sec_Increment_flag = 0;
unsigned char Min_Decrement_flag = 0;
unsigned char Min_Increment_flag = 0;
unsigned char H_Decrement_flag = 0;
unsigned char H_Increment_flag = 0;

// Function to initialize INT0 (RESET)
void INT0_INIT(void) {
    DDRD &= ~(1 << 2);
    PORTD |= (1 << 2);

    SREG |= (1 << 7);
    GICR |= (1 << INT0);
    MCUCR &= ~(1 << ISC00);
    MCUCR |= (1 << ISC01);
}

ISR(INT0_vect) {
    hours = 0;
    minutes = 0;
    seconds = 0;
}

// Function to initialize Timer1
void init_timer1(void) {
    TCNT1 = 0;
    TCCR1B |= (1 << WGM12);  // CTC mode
    TCCR1B |= (1 << CS12) | (1 << CS10);  // Prescaler of 1024
    TCCR1B &= ~(1 << CS11);
    OCR1A = 15625;  // Compare match value for 1 second
    TIMSK |= (1 << OCIE1A);  // Enable Timer1 Compare A interrupt
    SREG |= (1 << 7);
}

ISR(TIMER1_COMPA_vect) {
    if (TimerState_flag == 0) {
        seconds++;
        if (seconds == 60) {
            seconds = 0;
            minutes++;
        }
        if (minutes == 60) {
            minutes = 0;
            hours++;
        }
        if (hours == 100) {
            hours = 0;
        }
    } else if (TimerState_flag == 1) {
        if (seconds > 0) {
            seconds--;
        } else if (minutes > 0 || hours > 0) {
            seconds = 59;
            if (minutes > 0) {
                minutes--;
            } else if (hours > 0) {
                hours--;
                minutes = 59;
            }
        }
    }
}

// Function to initialize INT1 (PAUSE)
void INT1_INIT(void) {
    DDRD &= ~(1 << 3);
    MCUCR |= (1 << ISC11) | (1 << ISC10);
    GICR |= (1 << INT1);
    SREG |= (1 << 7);
}

ISR(INT1_vect) {
    TCCR1B &= ~(1 << CS12) & ~(1 << CS11) & ~(1 << CS10);
}

// Function to initialize INT2 (RESUME)
void INT2_INIT(void) {
    DDRB &= ~(1 << 2);
    PORTB |= (1 << 2);
    MCUCSR &= ~(1 << ISC2);
    GICR |= (1 << INT2);
    SREG |= (1 << 7);
}

ISR(INT2_vect) {
    TCCR1B |= (1 << CS12) | (1 << CS10);
}

int main(void) {
    // Set up display, buzzer, LEDs, and buttons
    DDRC |= 0x0F;  // Set first 4 bits of PORTC as output
    PORTC &= 0xF0;  // Clear PC0-PC3

    DDRA |= 0x3F;  // Set all bits of PORTA as output

    DDRD |= (1 << 0);  // PD0 - Buzzer output
    PORTD &= ~(1 << 0);  // Initially off

    DDRD |= (1 << 4);  // PD4 - Red LED output (Counting up)
    PORTD |= (1 << 4);  // Initially on

    DDRD |= (1 << 5);  // PD5 - Yellow LED output (Counting down)
    PORTD &= ~(1 << 5);  // Initially off

    // Seconds Adjustment Buttons
    DDRB &= ~(1 << 5);
    PORTB |= (1 << 5);  // Internal pull-up for Decrement
    DDRB &= ~(1 << 6);
    PORTB |= (1 << 6);  // Internal pull-up for Increment

    // Minutes Adjustment Buttons
    DDRB &= ~(1 << 3);
    PORTB |= (1 << 3);  // Internal pull-up for Decrement
    DDRB &= ~(1 << 4);
    PORTB |= (1 << 4);  // Internal pull-up for Increment

    // Hours Adjustment Buttons
    DDRB &= ~(1 << 0);
    PORTB |= (1 << 0);  // Internal pull-up for Decrement
    DDRB &= ~(1 << 1);
    PORTB |= (1 << 1);  // Internal pull-up for Increment

    // INT0 - Reset Timer
    INT0_INIT();

    // Timer1 with prescaler of 1024
    init_timer1();

    // INT1 - Pause Timer
    INT1_INIT();

    // INT2 - Resume Timer
    INT2_INIT();

    // Timer State Button (Increment/Decrement)
    DDRB &= ~(1 << 7);
    PORTB |= (1 << 7);  // Internal pull-up

    while (1) {
        display_time(hours, minutes, seconds);

        // Buzzer Activation
        if (hours == 0 && minutes == 0 && seconds == 0 && TimerState_flag == 1) {
            PORTD |= (1 << 0);  // Activate buzzer
        } else {
            PORTD &= ~(1 << 0);  // Deactivate buzzer
        }

        // Time Adjustment for Seconds, Minutes, and Hours
        handle_time_adjustment();
        handle_timer_state_toggle();
    }
}

void display_time(unsigned char h, unsigned char m, unsigned char s) {
    PORTC = s % 10;
    PORTA |= 0x20;
    _delay_ms(3);
    PORTA &= ~0x20;

    PORTC = s / 10;
    PORTA |= 0x10;
    _delay_ms(3);
    PORTA &= ~0x10;

    PORTC = m % 10;
    PORTA |= 0x08;
    _delay_ms(3);
    PORTA &= ~0x08;

    PORTC = m / 10;
    PORTA |= 0x04;
    _delay_ms(3);
    PORTA &= ~0x04;

    PORTC = h % 10;
    PORTA |= 0x02;
    _delay_ms(3);
    PORTA &= ~0x02;

    PORTC = h / 10;
    PORTA |= 0x01;
    _delay_ms(3);
    PORTA &= ~0x01;
}

void handle_time_adjustment(void) {
    // Seconds Increment
    if (!(PINB & (1 << 6))) {
        _delay_ms(30);
        if (!(PINB & (1 << 6)) && Sec_Increment_flag == 0) {
            seconds++;
            if (seconds == 60) seconds = 0;
            Sec_Increment_flag = 1;
        }
    } else {
        Sec_Increment_flag = 0;
    }

    // Seconds Decrement
    if (!(PINB & (1 << 5))) {
        _delay_ms(30);
        if (!(PINB & (1 << 5)) && Sec_Decrement_flag == 0) {
            if (seconds > 0) {
                seconds--;
            } else {
                seconds = 59;
            }
            Sec_Decrement_flag = 1;
        }
    } else {
        Sec_Decrement_flag = 0;
    }

    // Minutes Increment
    if (!(PINB & (1 << 4))) {
        _delay_ms(30);
        if (!(PINB & (1 << 4)) && Min_Increment_flag == 0) {
            minutes++;
            if (minutes == 60) minutes = 0;
            Min_Increment_flag = 1;
        }
    } else {
        Min_Increment_flag = 0;
    }

    // Minutes Decrement
    if (!(PINB & (1 << 3))) {
        _delay_ms(30);
        if (!(PINB & (1 << 3)) && Min_Decrement_flag == 0) {
            if (minutes > 0) {
                minutes--;
            } else {
                minutes = 59;
            }
            Min_Decrement_flag = 1;
        }
    } else {
        Min_Decrement_flag = 0;
    }

    // Hours Increment
    if (!(PINB & (1 << 1))) {
        _delay_ms(30);
        if (!(PINB & (1 << 1)) && H_Increment_flag == 0) {
            hours++;
            if (hours == 100) hours = 0;
            H_Increment_flag = 1;
        }
    } else {
        H_Increment_flag = 0;

